#! /bin/bash
# {{ ansible_managed }}

# Pipes need to fail
set -o pipefail

# Settings
NUM_RETRIES=3
DEFAULT_DRIVE=/dev/dvd
ISO_DIR="{{ fileshare_path }}/ISOs"

# Start of script

# Parse CLI params
if [[ "$1" == "--udev" ]]; then
	shift

	FULL_AUTO="true"
	beep -f 987.77 -l 250 -n -f 1479.98 -l 250
fi

DRIVE="${1:-"$DEFAULT_DRIVE"}"

# Check that a CD/DVD drive was provided as the first argument
if [[ ! -b "$DRIVE" ]]; then
	echo "Usage: $0 /dev/dvd"
	exit 1
fi

# Close the tray
eject -rt "$DRIVE" || exit $?

# Get the volume label, and block size of the CD/DVD
retry_count=0
while [[ $retry_count -lt $NUM_RETRIES ]]; do
	BLKID="$(blkid -o export -s LABEL -s BLOCK_SIZE "$DRIVE")" && break

	retry_count=$((retry_count + 1))
	beep -f 220 -l 500
	sleep 1
done

if [[ $retry_count -ge $NUM_RETRIES ]]; then
	eject -r "$DRIVE"

	echo "Error: Failed to get ISO info after $NUM_RETRIES attempts"
	exit 1
fi

# Sets $LABEL and $BLOCK_SIZE
eval "$BLKID"
SIZE="$(blockdev --getsize64 "$DRIVE")"
# Calculate block size by rounding up (x + y - 1) / y is rounded up division in int space
NUM_BLOCKS="$(((SIZE + BLOCK_SIZE - 1) / BLOCK_SIZE))"

# Create the output filename based on the volume label
i=0
while true; do
	if [ $i -eq 0 ]; then
		FILENAME="$ISO_DIR/$LABEL.iso"
	else
		FILENAME="$ISO_DIR/${LABEL}_$i.iso"
	fi

	[[ -f "$FILENAME" ]] || break

	i="$((i + 1))"
done

# Exit if we're in full auto mode and the image already exists and beep twice
if [[ "$FULL_AUTO" == "true" && $i -ne 0 ]]; then
	echo "Warning: $LABEL already has been copied. Aborting"
	beep -f 220 -l 500 -r 2
	exit
fi

TMP_FILENAME="${FILENAME%/*}/.${FILENAME##*/}.tmp"

# Printing info
cat <<EOF
Reading CD/DVD:
- Name:      $LABEL
- Size:      $(numfmt --to=iec-i --format="%.2fB" "$SIZE")
- File Name: $FILENAME

EOF

# Write the data to the ISO file and then eject the CD/DVD drive
mkdir -p "$ISO_DIR"

retry_count=0
while [[ $retry_count -lt $NUM_RETRIES ]]; do
	truncate -s "$SIZE" "$TMP_FILENAME" &&
		if [[ "$FULL_AUTO" == "true" ]]; then
			dd if="$DRIVE" of="$TMP_FILENAME" bs="$BLOCK_SIZE" count="$NUM_BLOCKS" conv=notrunc status=none
		else
			pv -tpreb -s "$SIZE" "$DRIVE" | dd of="$TMP_FILENAME" bs="$BLOCK_SIZE" count="$NUM_BLOCKS" conv=notrunc status=none
		fi &&
		mv -f "$TMP_FILENAME" "$FILENAME" &&
		break

	retry_count=$((retry_count + 1))
	beep -f 220 -l 500
	sleep 1
done

if [[ $retry_count -ge $NUM_RETRIES ]]; then
	echo "Warning: Failed to read disk after $NUM_RETRIES attempts - using ddrescue"
	beep -f 500 -l 150 -n -f 500 -l 150 -D 500 -n -f 300 -l 800

	# First pass
	ddrescue --sector-size="$BLOCK_SIZE" "$DRIVE" "$TMP_FILENAME" /tmp/ddr.log

	# Second raw pass
	modprobe raw
	raw /dev/raw/raw1 /dev/dvd
	ddrescue --sector-size="$BLOCK_SIZE" --retry-passes="$NUM_RETRIES" --complete-only /dev/raw/raw1 "$TMP_FILENAME" /tmp/ddr.log
	ddrescue_failed=$?

	# Cleanup
	rm /tmp/ddr.log
	raw /dev/raw/raw1 0 0

	[[ $ddrescue_failed -eq 0 ]] && mv -f "$TMP_FILENAME" "$FILENAME"
else
	ddrescue_failed=0
fi

chown -R nobody:nogroup "$ISO_DIR"
eject -r "$DRIVE"

# Exit on error
if [[ $ddrescue_failed -ne 0 ]]; then
	echo "Error: Failed to read disk with ddrescue after $NUM_RETRIES attempts!"
	exit 1
fi

# Taken from https://github.com/ShaneMcC/beeps/blob/master/mario-victory.sh
beep -f 130 -l 100 -n -f 262 -l 100 -n -f 330 -l 100 -n -f 392 -l 100 -n -f 523 -l 100 -n -f 660 -l 100 -n -f 784 -l 300 -n -f 660 -l 300 -n -f 146 -l 100 -n -f 262 -l 100 -n -f 311 -l 100 -n -f 415 -l 100 -n -f 523 -l 100 -n -f 622 -l 100 -n -f 831 -l 300 -n -f 622 -l 300 -n -f 155 -l 100 -n -f 294 -l 100 -n -f 349 -l 100 -n -f 466 -l 100 -n -f 588 -l 100 -n -f 699 -l 100 -n -f 933 -l 300 -n -f 933 -l 100 -n -f 933 -l 100 -n -f 933 -l 100 -n -f 1047 -l 400
